import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { MoneyCourse, Weather } from './bot.model';
import { WeatherDto } from './dto/weather.dto';
import { getWeather1 } from './utils/weather';
import getCourse from './utils/money-course';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class BotService implements OnModuleInit {
    private isWeatherRunning = false;
    private isMoneyRunning = false;
    private weatherToken: string;
    private moneyToken: string;

    constructor(
        @InjectBot() private bot: Telegraf,
        @InjectModel(MoneyCourse) private moneyRepository: typeof MoneyCourse,
        @InjectModel(Weather) private weatherRepository: typeof Weather,
        private configService: ConfigService
    ) {
        this.weatherToken = this.configService.get<string>('WEATHER_TOKEN');
        this.moneyToken = this.configService.get<string>('MONEY_TOKEN');

        if (!this.weatherToken) {
            console.error("‚ùå API-–∫–ª—é—á –¥–ª—è –ø–æ–≥–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
        }
        if (!this.moneyToken) {
            console.error("‚ùå API-–∫–ª—é—á –¥–ª—è –≤–∞–ª—é—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
        }
    }

    private formatTime(date: string | number): string {
        return new Date(date).toLocaleString('ru-RU', {
            timeZone: 'Asia/Ho_Chi_Minh', hour: '2-digit', minute: '2-digit', day: '2-digit', month: '2-digit', year: '2-digit'
        });
    }

    async checkWeather() {
        if (this.isWeatherRunning) return;
        this.isWeatherRunning = true;

        while (this.isWeatherRunning) {
            try {
                if (!this.weatherToken) {
                    throw new Error("‚ùå API-–∫–ª—é—á –¥–ª—è –ø–æ–≥–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
                }
                
                const weatherRawData = await getWeather1(this.weatherToken);
                if (!weatherRawData) {
                    throw new Error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ!");
                }
                
                const weatherDto: WeatherDto = {
                    time_point: 0,
                    time_value: this.formatTime(weatherRawData.time),
                    temp: weatherRawData.temp,
                    humidity: weatherRawData.humidity,
                    pressure: weatherRawData.pressure,
                    wind_speed: weatherRawData.wind_speed,
                    wind_gust: weatherRawData.wind_gust,
                    wind_deg: weatherRawData.wind_deg,
                    clouds: weatherRawData.clouds,
                    rain_1h: weatherRawData.rain_1h,
                    rain_3h: weatherRawData.rain_3h,
                    sunrise: this.formatTime(weatherRawData.sunrise),
                    sunset: this.formatTime(weatherRawData.sunset),
                    icon: weatherRawData.icon,
                    description: weatherRawData.description,
                    visibility: weatherRawData.visibility,
                    pop: 0, 
                };

                await this.weatherRepository.upsert(weatherDto);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error.message);
            }
            await new Promise(resolve => setTimeout(resolve, 600000));
        }
    }

    async updateMoneyCourse() {
        if (this.isMoneyRunning) return;
        this.isMoneyRunning = true;
    
        while (this.isMoneyRunning) {
            try {
                console.log("üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç...");
    
                if (!this.moneyToken) {
                    throw new Error("‚ùå API-–∫–ª—é—á –¥–ª—è –≤–∞–ª—é—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
                }
    
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
                const lastCourse = await this.moneyRepository.findOne({ order: [['time', 'DESC']] });
                // console.log("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫—É—Ä—Å:", lastCourse?.dataValues);
    
                if (lastCourse) {
                    const lastUpdateTime = new Date(lastCourse.time).getTime();

                    // console.log(`‚è± –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (timestamp): ${lastUpdateTime}`);

                    const currentTime = Date.now();
    
                    // console.log(`‚è± –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (timestamp): ${currentTime}`);

                    const hoursSinceLastUpdate = (currentTime - lastUpdateTime) / (1000 * 60 * 60);
    
                    console.log(`‚è± –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ ${hoursSinceLastUpdate.toFixed(2)} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥.`);
    
                    if (hoursSinceLastUpdate < 7.5) {
                        console.log("‚è≥ –ö—É—Ä—Å –≤–∞–ª—é—Ç –µ—â—ë –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å.");
                        await new Promise(resolve => setTimeout(resolve, 3600000)); // –ñ–¥—ë–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                        continue;
                    }
                }
    
                // –ó–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                console.log("üåê –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ API...");
                let courseData = await getCourse(this.moneyToken);
                // console.log("üì• –î–∞–Ω–Ω—ã–µ –æ—Ç API:", courseData);
    
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if (!courseData || typeof courseData !== "object") {
                    throw new Error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—É—Ä—Å–∞–º –≤–∞–ª—é—Ç!");
                }
    
                if (!courseData.usd || !courseData.vnd) {
                    console.error("‚ùå –û—à–∏–±–∫–∞: –í API-–æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –∫—É—Ä—Å–∞ USD –∏–ª–∏ VND!", courseData);
                    throw new Error("‚ùå –í API-–æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!");
                }
    
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ ISO-—Ñ–æ—Ä–º–∞—Ç–µ
                const updatedData = { ...courseData, time: new Date().toISOString() };
                // console.log("üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", updatedData);
    
                await this.moneyRepository.upsert(updatedData);
                console.log("‚úÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª—ë–Ω:", updatedData);
    
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç:', error.message);
            }
    
            await new Promise(resolve => setTimeout(resolve, 28800000)); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 8 —á–∞—Å–æ–≤
        }
    }
    

    async getSavedWeather() {
        return await this.weatherRepository.findOne({ order: [['time_value', 'DESC']] });
    }

    async getSavedCourse() {
        return await this.moneyRepository.findOne({ order: [['time', 'DESC']] });
    }

    stopWeatherCheck() {
        this.isWeatherRunning = false;
        console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
    }

    stopMoneyCheck() {
        this.isMoneyRunning = false;
        console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
    }

    async onModuleInit() {
        const webhookUrl = `https://seawindtravel.ru/api/bot/webhook`;
    
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫
            const webhookInfo = await this.bot.telegram.getWebhookInfo();
            console.log(`üåç –¢–µ–∫—É—â–∏–π Webhook: ${webhookInfo.url || "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}`);
    
            // –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
            if (webhookInfo.url && webhookInfo.url !== webhookUrl) {
                console.log("üõ†Ô∏è –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π Webhook...");
                await this.bot.telegram.deleteWebhook();
                console.log("‚úÖ –°—Ç–∞—Ä—ã–π Webhook —É–¥–∞–ª—ë–Ω.");
            }
    
            // –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
            if (!webhookInfo.url || webhookInfo.url !== webhookUrl) {
                console.log("üöÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–æ–≤—ã–π Webhook...");
                const response = await this.bot.telegram.setWebhook(webhookUrl, {
                    allowed_updates: ["message", "callback_query"],
                    drop_pending_updates: true, // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –æ—Ñ—Ñ–ª–∞–π–Ω
                });
    
                if (response) {
                    console.log(`‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
                } else {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook!");
                }
            } else {
                console.log("üîπ Webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é.");
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Webhook:", error);
        }
    
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        this.checkWeather();
        this.updateMoneyCourse();
    }
}
