import { Update, Start, Hears, InjectBot, Action } from 'nestjs-telegraf';
import { Telegraf, Context, Markup } from 'telegraf';
import { BotService } from './bot.service';
import { generateMessageUSD, generateMessageVND, generateMessageWeather } from './bot.constants';

@Update()
export class BotUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: BotService
  ) {}

  @Start()
  async onStart(ctx: Context) {
    await ctx.reply(
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      Markup.keyboard([
        ['üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç', 'üå¶ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞']
      ]).resize()
    );
  }

  @Hears('üå¶ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞')
  async onWeatherRequest(ctx: Context) {
    const weather = await this.appService.getSavedWeather();
    if (!weather) {
      await ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.');
      return;
    }
    const message = generateMessageWeather(weather);
    await ctx.reply(message);
  }

  @Hears('üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç')
  async onCourseRequest(ctx: Context) {
    const course = await this.appService.getSavedCourse();
    if (!course) {
      await ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç.');
      return;
    }
    const message = generateMessageUSD(course);
    await ctx.reply(message, Markup.inlineKeyboard([
      Markup.button.callback('üí± –ö—É—Ä—Å –≤—å–µ—Ç–Ω–∞–º—Å–∫–æ–≥–æ –¥–æ–Ω–≥–∞', 'convert_to_vnd')
    ]));
  }

  @Action('convert_to_vnd')
  async onConvertToVND(ctx: Context) {
    const course = await this.appService.getSavedCourse();
    if (!course) {
      await ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç.');
      return;
    }
    const message = generateMessageVND(course);
    await ctx.editMessageText(message, Markup.inlineKeyboard([
      Markup.button.callback('üí≤ –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞', 'convert_to_usd')
    ]));
  }

  @Action('convert_to_usd')
  async onConvertToUSD(ctx: Context) {
    const course = await this.appService.getSavedCourse();
    if (!course) {
      await ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç.');
      return;
    }
    const message = generateMessageUSD(course);
    await ctx.editMessageText(message, Markup.inlineKeyboard([
      Markup.button.callback('üí± –ö—É—Ä—Å –≤—å–µ—Ç–Ω–∞–º—Å–∫–æ–≥–æ –¥–æ–Ω–≥–∞', 'convert_to_vnd')
    ]));
  }
}
