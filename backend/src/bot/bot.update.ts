import { Update, Start, Hears, InjectBot, Action, On } from 'nestjs-telegraf';
import { Telegraf, Context } from 'telegraf';
import { BotService } from './bot.service';
import { generateMessageCustomVND, generateMessageCustomUSD, generateMessageUSD, generateMessageVND, generateMessageWeather } from './utils/constants';
import { BotContext } from './utils/session.interface';
import { Message } from 'telegraf/types';
import { keyboards, inlineKeyboards } from './utils/buttons';

@Update()
export class BotUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: BotService
  ) {}

  @Start()
  async onStart(ctx: Context) {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboards.start);
  }

  @Hears('üå¶ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞')
  async onWeatherRequest(ctx: Context) {
    const weather = await this.appService.getSavedWeather();
    if (!weather) {
      await ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ!');
      return;
    }
    const message = generateMessageWeather(weather);
    await ctx.reply(message);
  }

  @Hears('üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç')
  async onCourseRequest(ctx: Context) {
    const course = await this.appService.getSavedCourse();
    if (!course) {
      await ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç!');
      return;
    }
    const message = generateMessageUSD(course);
    await ctx.reply(message, inlineKeyboards.usd);
  }

  @Action('convert_to_vnd')
  async onConvertToVND(ctx: Context) {
    const course = await this.appService.getSavedCourse();
    if (!course) {
      await ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç!');
      return;
    }
    const message = generateMessageVND(course);
    await ctx.editMessageText(message, inlineKeyboards.vnd);
  }

  @Action('convert_to_usd')
  async onConvertToUSD(ctx: Context) {
    const course = await this.appService.getSavedCourse();
    if (!course) {
      await ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç!');
      return;
    }
    const message = generateMessageUSD(course);
    await ctx.editMessageText(message, inlineKeyboards.usd);
  }

  @Action('enter_custom_vnd')
  async onEnterCustomVND(ctx: BotContext) {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–Ω–≥–∞—Ö, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å:');
    ctx.session.waitingForVNDInput = true;
  }

  @Action('enter_custom_usd')
  async onEnterCustomUSD(ctx: BotContext) {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å:');
    ctx.session.waitingForUSDInput = true;
  }

  @On('text')
  async onUserInputCurrency(ctx: BotContext) {
    if (!ctx.session.waitingForVNDInput && !ctx.session.waitingForUSDInput) {
      return;
    }

    if (!ctx.message) {
      await ctx.reply('‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!');
      return;
    }

    const textMessage = ctx.message as Message.TextMessage;
    if (!textMessage.text) {
      await ctx.reply('‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!');
      return;
    }

    const input = textMessage.text.trim();
    if (!/^\d+$/.test(input)) {
      await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö! (–ø—Ä–∏–º–µ—Ä: 250000)');
      return;
    }

    const amount = parseInt(input, 10);
    const course = await this.appService.getSavedCourse();
    if (!course) {
      await ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç!');
      return;
    }

    if (ctx.session.waitingForVNDInput) {
      const message = generateMessageCustomVND(course, amount);
      await ctx.reply(message, inlineKeyboards.vnd);
      ctx.session.waitingForVNDInput = false;
    } else if (ctx.session.waitingForUSDInput) {
      const message = generateMessageCustomUSD(course, amount);
      await ctx.reply(message, inlineKeyboards.usd);
      ctx.session.waitingForUSDInput = false;
    }
  }
}
