"use client";

import { useEffect, useRef, useState } from "react";

interface Excursion {
  id: number;
  name: string;
}

const tooltips = {
  name: "–ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
  adults:
    '–í–æ –í—å–µ—Ç–Ω–∞–º–µ —á–∞—â–µ –≤—Å–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–æ—Å—Ç–∞: "–≤–∑—Ä–æ—Å–ª—ã–π" ‚Äî –±–æ–ª–µ–µ 120—Å–º, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ‚Äî —ç–∫—Å–∫—É—Ä—Å–∏—è –Ω–∞ –æ—Å—Ç—Ä–æ–≤ DoiDep: "–≤–∑—Ä–æ—Å–ª—ã–π" ‚Äî 12 –ª–µ—Ç –∏ –±–æ–ª–µ–µ.',
  children:
    '–í–æ –í—å–µ—Ç–Ω–∞–º–µ —á–∞—â–µ –≤—Å–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–æ—Å—Ç–∞: "—Ä–µ–±—ë–Ω–æ–∫" ‚Äî –æ—Ç 90—Å–º –¥–æ 120—Å–º, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ‚Äî —ç–∫—Å–∫—É—Ä—Å–∏—è –Ω–∞ –æ—Å—Ç—Ä–æ–≤ DoiDep: "—Ä–µ–±—ë–Ω–æ–∫" ‚Äî –æ—Ç 3-—Ö –¥–æ 12-—Ç–∏ –ª–µ—Ç.',
  toddlers:
    '–í–æ –í—å–µ—Ç–Ω–∞–º–µ —á–∞—â–µ –≤—Å–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–æ—Å—Ç–∞: "–º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–±—ë–Ω–æ–∫" ‚Äî –¥–æ 90—Å–º, –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ‚Äî —ç–∫—Å–∫—É—Ä—Å–∏—è –Ω–∞ –æ—Å—Ç—Ä–æ–≤ DoiDep: "–º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–±—ë–Ω–æ–∫" ‚Äî –¥–æ 3-—Ö –ª–µ—Ç.',
};

export default function BookTour() {
  const [excursions, setExcursions] = useState<Excursion[]>([]);
  const [formData, setFormData] = useState({
    excursionId: "",
    name: "",
    contactMethod: "Telegram",
    contactValue: "",
    adults: 1,
    children: 0,
    toddlers: 0,
  });
  const [tooltipOpen, setTooltipOpen] = useState<string | null>(null);
  const tooltipRefs = useRef<{ [key: string]: HTMLDivElement | null }>({});

  useEffect(() => {
    fetch("/api/excursions")
      .then((res) => res.json())
      .then((data: Excursion[]) => {
        const filtered = data
          .filter((e) => String(e.id).startsWith("1"))
          .sort((a, b) => a.id - b.id);
        setExcursions(filtered);
      })
      .catch(console.error);
  }, []);

  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      const clickedInsideTooltip = Object.values(tooltipRefs.current).some(
        (ref) => ref && ref.contains(e.target as Node)
      );
      if (!clickedInsideTooltip) setTooltipOpen(null);
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const validateContact = (): boolean => {
    const value = formData.contactValue.trim();
    let isValid = true;

    switch (formData.contactMethod) {
      case "email":
        isValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
        break;
      case "–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
        isValid = /^(\+84|0)\d{9,10}$/.test(value);
        break;
      default:
        isValid = value.length > 1;
    }

    return isValid;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateContact()) return;

    const selectedTour = excursions.find(
      (ex) => String(ex.id) === formData.excursionId
    );

    const text = `
<b>üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</b>
<b>–≠–∫—Å–∫—É—Ä—Å–∏—è:</b> ${selectedTour?.name || "‚Äî"}
<b>–ò–º—è:</b> ${formData.name}
<b>–ö–æ–Ω—Ç–∞–∫—Ç (${formData.contactMethod}):</b> ${formData.contactValue}
<b>–í–∑—Ä–æ—Å–ª—ã—Ö:</b> ${formData.adults}
<b>–î–µ—Ç–µ–π:</b> ${formData.children}
<b>–ú–∞–ª–µ–Ω—å–∫–∏—Ö –¥–µ—Ç–µ–π:</b> ${formData.toddlers}
    `.trim();

    fetch("/api/bot/send-request", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text }),
    })
      .then(() => {
        alert("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      })
      .catch(() => {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.");
      });
  };

  const renderFieldWithTooltip = (
    label: string,
    name: string,
    type: "text" | "number"
  ) => (
    <div className="relative mb-4">
      <label className="block mb-1 flex items-center gap-2">
        {label}
        <button
          type="button"
          className="text-blue-500 cursor-pointer text-xl leading-none"
          onClick={() =>
            setTooltipOpen((prev) => (prev === name ? null : name))
          }
        >
          ‚ÑπÔ∏è
        </button>
      </label>
      <input
        type={type}
        name={name}
        min={type === "number" ? 0 : undefined}
        required
        value={formData[name as keyof typeof formData] as string | number}
        onChange={handleChange}
        className="w-full border px-3 py-2 rounded"
      />
      {tooltipOpen === name && (
        <div
          ref={(el) => {
            if (el) tooltipRefs.current[name] = el;
          }}
          className="absolute top-full left-0 z-20 mt-1 w-full rounded border bg-white p-2 text-sm shadow-md"
        >
          {tooltips[name as keyof typeof tooltips]}
        </div>
      )}
    </div>
  );

  return (
    <div className="container mx-auto max-w-xl px-4 py-24">
      <h1 className="mb-6 text-3xl font-bold">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="mb-1 block">–í—ã–±–æ—Ä —ç–∫—Å–∫—É—Ä—Å–∏–∏</label>
          <select
            name="excursionId"
            value={formData.excursionId}
            onChange={handleChange}
            required
            className="w-full rounded border px-3 py-2"
          >
            <option value="" disabled>
              –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–∫—É—Ä—Å–∏—é
            </option>
            {excursions.map((tour) => (
              <option key={tour.id} value={tour.id}>
                {tour.name}
              </option>
            ))}
          </select>
        </div>

        {renderFieldWithTooltip("–ò–º—è", "name", "text")}

        <div>
          <label className="mb-1 block">–ö–∞–∫ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è</label>
          <select
            name="contactMethod"
            value={formData.contactMethod}
            onChange={handleChange}
            className="mb-2 w-full rounded border px-3 py-2"
          >
            <option>Telegram</option>
            <option>Whatsapp</option>
            <option>Zalo</option>
            <option>email</option>
            <option>–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</option>
          </select>
          <input
            type="text"
            name="contactValue"
            required
            value={formData.contactValue}
            onChange={handleChange}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç"
            className="w-full rounded border px-3 py-2"
          />
        </div>

        {renderFieldWithTooltip("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö", "adults", "number")}
        {renderFieldWithTooltip("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π", "children", "number")}
        {renderFieldWithTooltip("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –¥–µ—Ç–µ–π", "toddlers", "number")}

        <button
          type="submit"
          className="mt-4 w-full rounded bg-blue-600 py-2 text-white hover:bg-blue-700"
        >
          –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
        </button>
      </form>
    </div>
  );
}
